创建 Web 项目
接下来我们来学习创建属于我们自己的 Web 项目。

执行命令 django-admin startproject 初始化一个 Django 项目，
后面的参数为项目名称，我们这里的项目名称定为 myProject。
执行 tree myProject 命令查看项目的目录结构
$ django-admin startproject myProject
$ ll
$ tree myProject

对主目录下的文件和目录依次说明：

manage.py 项目的入口文件，在后面的实验中我们会大量使用
          它来执行一些命令用来创建应用、启动项目、控制数据表迁移等。
myProject 主目录下的同名子目录，为项目的核心目录，它里面包含配置
          文件和管理应用的文件。
myProject/__init__.py 每个子目录都会包含这样一个 __init__.py 文件，
          它是一个空文件，在需要的时候会引入目录下的对象。
myProject/settings.py 配置文件，里面包含对数据库的设置项、
          CSRF Token 的设置项、模板的设置项等全部设置。
myProject/urls.py 路由控制文件，处理客户端请求，分发到对应的视图函数
          去处理。
myProject/wsgi.py 处理请求和响应，我们很少去动它。

在终端执行 cd myProject 命令进入到项目的主目录，然后执行如下命令创建
一个名为 myApp 的应用，注意实验环境里不可以创建名为 test 的应用，
某些情况下它与Python 模块冲突
$ cd myProject
$ python3 manage.py startapp myApp

应用中的文件说明如下：

myApp/admin.py 用于控制后台管理的文件，在后面的实验中会用到。
myApp/apps.py 用于管理应用本身的文件，包括应用的名字如何命名，
              默认就是 myApp 。
myApp/__init__.py 空文件，前面已经介绍过。
myApp/migrations 这是用于记录数据库变更信息的目录，Django 
                 中自带的数据库版本控制功能就体现在这个目录，
                 在学习数据存储时会详细介绍。
myApp/models.py 创建映射类的文件，熟悉 Flask 的同学一定不陌生。
myApp/tests.py 编写测试代码的文件。
myApp/views.py 创建视图函数的文件，视图函数用于处理客户端发来的请求。

配置文件

创建一个应用后，该应用并未与项目产生联系，需要在配置文件中添加此应用。
$ vim myProject/settings.py
修改 INSTALLED_APPS 项，添加我们创建的应用名称 myApp

启动项目
我们的实验环境为 Web 环境，其实本质上就是一个在线集成工具，
类似 VSCode。它内部没有浏览器，但提供了一个 8080 端口的 Web 服务。
我们可以在启动项目之后，点击右侧工具栏的 “Web 服务”，
会自动在你的浏览器上打开一个新标签来访问你的项目：

新打开一个终端并输入命令：
$ cd myProject
$ python3 manage.py runserver 0:8080

其中 manage.py 作为入口文件，它有很多选项提供各种各样的功能。
runserver 为启动项目的选项，后面的 0:8080 为 0.0.0.0:8080 
的简写，冒号前面为 IP 地址，后面为端口号。

启动项目后，点击工具栏的“Web 服务”按钮，打开新的页面，
会出现如下图所示的报错：
这是因为我们的实验环境稍有些特殊，需要在配置文件中增加一项设置。

打开另一个终端标签，进入项目的主目录 myProject，打开 
myProject/settings.py 文件，修改 ALLOWED_HOSTS 这一项为
上述划线字符（注意：每次打开内容可能不一样，每启动一次都需要修
改一下该项内容）。它也是一个列表，在列表中添加报错中所示的 header 
信息，也就是单引号中的内容

同时，我们将欢迎页适配为中文，方便后续操作和阅读，
将 LANGUATE_CODE 和 TIME_ZONE 修改如下：
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

修改并保存后，ctrl+c 关闭服务器并重新打开 Web 服务

创建模型
模型是真实数据的简明描述。它包含了存储的数据所必要的字段和行为。
Django 遵循不要重复自己（DRY 原则）。它的目标是让你只需要定义
数据模型，然后其它的东西你都不用关心，都会自动从模型生成。

实验前，先进入到项目主目录：
$ cd myProject

在我们创建的图书馆应用中，需要创建一个模型 Book。Book 
模型包括四个字段：书名、作者、出版社、出版日期。
向 myApp/models.py 文件中写入如下代码：
# myApp/models.py
from django.db import models

class Book(models.Model):
    name = models.CharField(max_length=200)
    author = models.CharField(max_length=100)
    pub_house = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')

从代码可以看出，模型是 django.db.models.Model 类的子类。每个
模型有一些类变量，它们都表示模型里的一个数据库字段。

每个字段都是 Field 类的实例。比如字符字段是 CharField，
日期字段被表示为 DateTImeField。这将告诉 Django 每个字段要处
理的数据类型。

定义某些 Field 类实例需要参数。如上面的 max_length=100 中的 
max_length。这个参数的用处不止于用来定义数据结构，也用于验证数据。

激活模型
通过前面的代码，Django 可以：

为这个应用创建数据库 schema（生成 CREATE TABLE 语句）。
创建可以与 Book 对象进行交互的 Python 数据库 API。

为了实现上述功能，我们首先要将 myApp 应用安装到我们项目中。

因为 MyappConfig 类写在文件 myApp/apps.py 中，所以它的路径为 
myApp.apps.MyappConfig。

在设置文件中添加路径：
# myProject/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'myApp', 这一注释掉，不注释掉会因重复而报错
    'myApp.apps.MyappConfig',
]

现在你的 Django 项目会包含 myApp 应用。 运行下面的命令：
$ python3 manage.py makemigrations myApp

通过运行 makemigrations 命令，Django 会检测你对模型文件的修改，
并且把修改的部分储存为一次迁移。

让我们看看迁移命令会执行哪些 SQL 语句。
$ python3 manage.py sqlmigrate myApp 0001

现在运行 migrate 命令，在数据库里创建新定义的模型的数据表：
$ python3 manage.py migrate

使用 API
现在尝试一下 Django 为我们创建的各种 API：
$ python3 manage.py shell

使用这个命令而不是简单的使用 "Python" 是因为 manage.py 
会设置 DJANGO_SETTINGS_MODULE 环境变量，这个变量会让 Django 
根据 myProject/settings.py 文件来设置 Python 包的导入路径。

In [1]: from myApp.models import Book
In [2]: Book.objects.all()   # 获取 Book 所有对象
Out[1]: <QuerySet []>
In [3]: from django.utils import timezone
In [4]: b = Book(name='Business', author='Tom', 
pub_house='First Press', pub_date=timezone.now())    #创建
In [5]: b.save() #保存
In [6]: b.id
Out[6]: 1
In [7]: b.name
Out[7]: 'Business'
In [8]: b.pub_date
Out[8]: datetime.datetime(2020, 4, 27, 7, 37, 59, 123686, tzinfo=<UTC>)

创建模板
首先，在你的 myProject/myApp 目录里创建一个 templates 目录。Django 
将会在这个目录里查找模板文件。

在 myProject/myProject/settings.py 文件中的 TEMPLATES 配置项描述
了 Django 如何载入和渲染模板。默认的设置文件设置了 DjangoTemplates 
后端，并设置 APP_DIRS = True。这一选项将会让 DjangoTemplates 在每
个 INSTALLED_APPS 文件夹中寻找 templates 子目录。

新建模板文件 myApp/templates/myApp/detail.html，并向其中写入如下代码：
<!--myApp/templates/myApp/detail.html-->
<h1>Book List</h1>
<table>
  <tr>
    <td>书名</td>
    <td>作者</td>
    <td>出版社</td>
    <td>出版时间</td>
  </tr>
  {% for book in book_list.all %}
  <tr>
    <td>{{ book.name }}</td>
    <td>{{ book.author }}</td>
    <td>{{ book.pub_house }}</td>
    <td>{{ book.pub_date }}</td>
  </tr>
  {% endfor %}
</table>
模板统一使用点符号 . 来访问变量的属性。在示例 {{ book.name }} 中，
首先 Django 尝试对 book 对象使用字典查找（也就是使用 obj.get(str) 
操作），如果失败了就尝试属性查找（也就是 obj.str 操作），结果是成功
了。如果这一操作也失败的话，将会尝试列表查找（也就是 obj[int] 操作）。

在 {% for ... in ... %} 循环中发生的函数调用：book_list.all 被解释
为 Python 代码 book_list.objects.all()，将会返回一个可迭代的 Book 
对象，这一对象可以在 {% for ... in ... %} 标签内部使用。

创建视图
现在我们要创建视图来返回图书列表：

# myApp/views.py
from django.shortcuts import render
from django.http import HttpResponse
from myApp.models import Book

def detail(request):
    book_list = Book.objects.order_by('-pub_date')[:5]
    context = {'book_list': book_list}
    return render(request, 'myApp/detail.html', context)

在此视图函数 detail 中，首先将数据库的 Book 列表按照 pub_date 
时间来排序，存储到变量 book_list 中。

“载入模板，填充上下文，再返回由它生成的 HttpResponse 对象”是一
个非常常用的操作流程。于是 Django 提供了一个快捷函数 render()。

render() 函数把 request 对象作为它的第一个参数，模板作为第二个
参数，字典作为它的可选的第三个参数。它返回给定模板呈现的给定文本
的一个 HttpResponse 对象。

在这里，context 信息将会返回到模板 myApp/detail.html。

绑定链接
将新视图添加进 myProject.urls 模块里：
# myProject/urls.py
from django.contrib import admin
from django.urls import path
from myApp import views

urlpatterns = [
    # path('admin/', admin.site.urls),
    path('', views.detail, name='detail'),
]